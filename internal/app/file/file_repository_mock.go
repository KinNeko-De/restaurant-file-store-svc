// Code generated by mockery v2.38.0. DO NOT EDIT.

package file

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockFileRepository is an autogenerated mock type for the FileRepository type
type MockFileRepository struct {
	mock.Mock
}

type MockFileRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileRepository) EXPECT() *MockFileRepository_Expecter {
	return &MockFileRepository_Expecter{mock: &_m.Mock}
}

// CreateFile provides a mock function with given fields: ctx, fileId, revisionId
func (_m *MockFileRepository) CreateFile(ctx context.Context, fileId uuid.UUID, revisionId uuid.UUID) (io.WriteCloser, error) {
	ret := _m.Called(ctx, fileId, revisionId)

	if len(ret) == 0 {
		panic("no return value specified for CreateFile")
	}

	var r0 io.WriteCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (io.WriteCloser, error)); ok {
		return rf(ctx, fileId, revisionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) io.WriteCloser); ok {
		r0 = rf(ctx, fileId, revisionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, fileId, revisionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileRepository_CreateFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFile'
type MockFileRepository_CreateFile_Call struct {
	*mock.Call
}

// CreateFile is a helper method to define mock.On call
//   - ctx context.Context
//   - fileId uuid.UUID
//   - revisionId uuid.UUID
func (_e *MockFileRepository_Expecter) CreateFile(ctx interface{}, fileId interface{}, revisionId interface{}) *MockFileRepository_CreateFile_Call {
	return &MockFileRepository_CreateFile_Call{Call: _e.mock.On("CreateFile", ctx, fileId, revisionId)}
}

func (_c *MockFileRepository_CreateFile_Call) Run(run func(ctx context.Context, fileId uuid.UUID, revisionId uuid.UUID)) *MockFileRepository_CreateFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockFileRepository_CreateFile_Call) Return(_a0 io.WriteCloser, _a1 error) *MockFileRepository_CreateFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileRepository_CreateFile_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (io.WriteCloser, error)) *MockFileRepository_CreateFile_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function with given fields: ctx, fileId, revisionId
func (_m *MockFileRepository) ReadFile(ctx context.Context, fileId uuid.UUID, revisionId uuid.UUID) (io.ReadCloser, error) {
	ret := _m.Called(ctx, fileId, revisionId)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (io.ReadCloser, error)); ok {
		return rf(ctx, fileId, revisionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) io.ReadCloser); ok {
		r0 = rf(ctx, fileId, revisionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, fileId, revisionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileRepository_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type MockFileRepository_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - fileId uuid.UUID
//   - revisionId uuid.UUID
func (_e *MockFileRepository_Expecter) ReadFile(ctx interface{}, fileId interface{}, revisionId interface{}) *MockFileRepository_ReadFile_Call {
	return &MockFileRepository_ReadFile_Call{Call: _e.mock.On("ReadFile", ctx, fileId, revisionId)}
}

func (_c *MockFileRepository_ReadFile_Call) Run(run func(ctx context.Context, fileId uuid.UUID, revisionId uuid.UUID)) *MockFileRepository_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockFileRepository_ReadFile_Call) Return(_a0 io.ReadCloser, _a1 error) *MockFileRepository_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileRepository_ReadFile_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (io.ReadCloser, error)) *MockFileRepository_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileRepository creates a new instance of MockFileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileRepository {
	mock := &MockFileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
